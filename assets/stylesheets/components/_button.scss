.button {
  // don't apply global `color` and `background-color`
  // always specify `fill/outline/color` props when using the component

  @include ff-primary($weight: $fw-primary-bold);

  padding: em(10 28);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: em(20);
  border: 1px solid transparent;

  @include mq(medium down) {
    font-size: em(18);
  }

  @include mq(small down) {
    font-size: em(16);
    padding: em(12 22);
  }

  // hover, focus

  &:hover,
  &:focus {
    &:not([disabled]) {
      opacity: 0.8;
    }
  }

  // disabled

  &[disabled] {
    cursor: default;
    opacity: 0.5;
  }

  // text

  // span {
  // }

  // icon

  svg {
    width: em(20);
    height: em(18);
    margin-right: em(10);
    position: relative;
    bottom: em(-1);
  }

  // display

  &--display-block {
    width: 100%;
    display: flex;
  }

  &--icon-only#{&}--icon-only {
    // ^ extra specificity to override paddings under mq's
    padding-left: em(10);
    padding-right: em(10);

    span {
      @include hide-visually;
    }

    svg {
      margin-right: 0;
      bottom: 0;
    }
  }

  // size

  &--size-small {
    font-size: em(17);
    padding: em(10 24);

    @include mq(small down) {
      font-size: em(14);
      padding: em(6 18);
    }
  }

  &--size-xsmall {
    font-size: em(14);
    padding: em(6 18);

    @include mq(small down) {
      font-size: em(13);
      padding: em(4 12);
    }
  }

  // fill

  &--fill-black {
    color: $color-white;
    background-color: $color-black;
  }

  &--fill-white {
    color: $color-black;
    background-color: $color-white;
  }

  // outline

  &[class*="button--outline-"] {
    border-color: currentColor;
  }

  &--outline-black {
    color: $color-black;
  }

  &--outline-white {
    color: $color-white;
  }

  // color

  &--color-black {
    color: $color-black;
  }

  &--color-white {
    color: $color-white;
  }
}
